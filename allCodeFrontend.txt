File Name: urinproben_datatype.ts
Location: ./frontend/src/types/urinproben_datatype.ts
Content:
export type urinprobenData = {
    barcode_id?: string;
    patient_Id_intern?: string;
    created_at: string;	
    probenart?: string; 	
    boxnummer?: number; 
    boxzeile?: string;
    boxspalte?: number;	
    lagerraum?: string;	
    anmerkungen?: string;	
}

--------------------------------------------------------------------------------
File Name: serumproben_datatype.ts
Location: ./frontend/src/types/serumproben_datatype.ts
Content:
export type serumprobenData = {
    barcode_id?: string;
    patient_Id_intern?: string;
    created_at: string;	
    probenart?: string; 	
    boxnummer?: number; 
    boxzeile?: string; 
    boxspalte?: number; 	
    lagerraum?: string;	
    anmerkungen?: string;	
}


--------------------------------------------------------------------------------
File Name: gewebeproben_datatype.ts
Location: ./frontend/src/types/gewebeproben_datatype.ts
Content:
export type gewebeprobenData = {
    barcode_ID?: string;
    patient_Id_intern?: string;
    created_at?: string;
    probenart?: string;
    boxnummer?: number;
    boxzeile?: string;
    boxspalte?: number;
    lagerraum?: string;
    anmerkungen?: string;
    abholer?: string;
    remarks?: string;
}

--------------------------------------------------------------------------------
File Name: gewebeprobenColumns.ts
Location: ./frontend/src/types/gewebeprobenColumns.ts
Content:
//label for data overview
// variable .... displayd text
export const gewebeprobenDataColumns = [
    { key: "barcode_id", label: "Barcode ID" },
    { key: "patient_Id_intern", label: "Patienten ID (intern)" },
    { key: "probenart", label: "Probenart" },
    { key: "boxnummer", label: "Boxnummer" },
    { key: "boxzeile", label: "Boxzeile" },
    { key: "boxspalte", label: "Boxspalte" },
    { key: "lagerraum", label: "Lagerraum" },   
    { key: "created_at", label: "Erstellungsdatum" },
    { key: "uhrzeit", label: "Probe erhalten (Uhrzeit)" },
    { key: "abholer", label: "Abholer:In" },
    { key: "anmerkungen", label: "Besonderheiten/Anmerkungen (bei Probennahme)" },
    { key: "remarks", label: "Bemerkungen (während Probenaufbereitung)" },
    { key: "status", label: "Probenstatus" }
];

--------------------------------------------------------------------------------
File Name: paraffinprobenColumns.ts
Location: ./frontend/src/types/paraffinprobenColumns.ts
Content:
export const paraffinprobenDataColumns = [
    { key: "patient_Id_intern", label: "Patienten ID (intern)" },
    { key: "created_at", label: "Erstellungsdatum" },
    { key: "probenart", label: "Probenart" },
    { key: "lagerraum", label: "Lagerraum" },
    { key: "anmerkungen", label: "Anmerkungen"},
    { key: "status", label: "Probenstatus" }
];

--------------------------------------------------------------------------------
File Name: patient_datatype.ts
Location: ./frontend/src/types/patient_datatype.ts
Content:
export type PatientData = {
    patient_Id_intern?: string;
    sap_id?: number;
    created_at: string;
    geschlecht?: string;
    alter?: number;
    op_diagnose?: string;
    op_geplant?: string;
    bemerkung?: string;
}

--------------------------------------------------------------------------------
File Name: paraffinproben_datatype.ts
Location: ./frontend/src/types/paraffinproben_datatype.ts
Content:
export type paraffinprobenData = {
    patient_Id_intern?: string;
    created_at: string;	
    probenart?: string;		
    lagerraum?: string;	
    anmerkungen?: string;	
}




--------------------------------------------------------------------------------
File Name: patientColumns.ts
Location: ./frontend/src/types/patientColumns.ts
Content:
export const patientDataColumns = [
    { key: "patient_Id_intern", label: "Patient/Innen ID (intern)" },
    { key: "sap_id", label: "SAP ID" },
    { key: "created_at", label: "Erstellungsdatum" },
    { key: "geschlecht", label: "Geschlecht" },
    { key: "alter", label: "Alter" },
    { key: "op_diagnose", label: "OP Diagnose" },
    { key: "bemerkung", label: "Bemerkung" },
    { key: "op_geplant", label: "Geplante OP"}
];


--------------------------------------------------------------------------------
File Name: urinprobenColumns.ts
Location: ./frontend/src/types/urinprobenColumns.ts
Content:
export const urinprobenDataColumns = [
    { key: "barcode_id", label: "Barcode ID" },
    { key: "patient_Id_intern", label: "Patienten ID (intern)" },
    { key: "created_at", label: "Erstellungsdatum" },
    { key: "probenart", label: "Probenart" },
    { key: "boxnummer", label: "Boxnummer" },
    { key: "boxzeile", label: "Boxzeile" },
    { key: "boxspalte", label: "Boxspalte" },
    { key: "lagerraum", label: "Lagerraum" },
    { key: "anmerkungen", label: "Anmerkungen" },
    { key: "status", label: "Probenstatus" }
];


--------------------------------------------------------------------------------
File Name: serumprobenColumns.ts
Location: ./frontend/src/types/serumprobenColumns.ts
Content:
export const serumprobenDataColumns = [
    { key: "barcode_id", label: "Barcode ID" },
    { key: "patient_Id_intern", label: "Patienten ID (intern)" },
    { key: "created_at", label: "Erstellungsdatum" },
    { key: "probenart", label: "Probenart" },
    { key: "boxnummer", label: "Boxnummer" },
    { key: "boxzeile", label: "Boxzeile" },
    { key: "boxspalte", label: "Boxspalte" },
    { key: "lagerraum", label: "Lagerraum" },
    { key: "anmerkungen", label: "Anmerkungen"},
    { key: "status", label: "Probenstatus" }
];


--------------------------------------------------------------------------------
File Name: otherOtypes.ts
Location: ./frontend/src/types/otherOtypes.ts
Content:
// here I will define the types which get used in the frontend in different places

// src/types/LastBoxInfo.ts

export interface LastBoxInfo {
    boxnummer: number;
    boxzeile: string;
    boxspalte: number;
}


// src/types/SuggestBoxData.ts

export interface SuggestedBoxData {
    suggestedBoxnummer: number;
    suggestedBoxzeile: string;
    suggestedBoxspalte: number;
    isNewBox: boolean;
}


--------------------------------------------------------------------------------
File Name: RootLayout.js
Location: ./frontend/src/components/RootLayout.js
Content:
import React from 'react';
import Link from 'next/link';
import clsx from 'clsx';
import { usePathname } from 'next/navigation';

export default function RootLayout({ children }) {
  const location = usePathname();

  return (
    <>
      {/* Top Navigation Bar */}
      <div className="bg-gradient-to-r from-blue-500 to-blue-700 p-6 text-white shadow-lg">
        <nav className="container mx-auto flex justify-between items-center">
          <div className="text-2xl font-bold">Probensammlung</div>
          <div className="flex space-x-4">
            {/* Updated Link structure without <a> tags */}
            <Link
              href="/"
              className={clsx('text-white font-semibold hover:text-blue-200', {
                underline: location === '/',
              })}
            >
              Home
            </Link>
            <Link
              href="/overview"
              className={clsx('text-white font-semibold hover:text-blue-200', {
                underline: location === '/overview',
              })}
            >
              Übersicht
            </Link>
            <Link
              href="/help"
              className={clsx('text-white font-semibold hover:text-blue-200', {
                underline: location === '/help',
              })}
            >
              Hilfe
            </Link>
          </div>
        </nav>
      </div>

      {/* Main Content */}
      <main className="container mx-auto p-4">
        {children}
      </main>
    </>
  );
}


--------------------------------------------------------------------------------
File Name: button.js
Location: ./frontend/src/components/button.js
Content:
import Button from "@mui/material/Button";
const ReusableButton = (props) => {
  return (
    <Button variant={props.buttonVariant} color={props.buttonColor}>
      {props.buttonText}
    </Button>
  );
};

export default ReusableButton;

--------------------------------------------------------------------------------
File Name: suggestBoxData.ts
Location: ./frontend/src/components/custom_functions/suggestBoxData.ts
Content:
// src/utils/suggestBoxData.ts

import { LastBoxInfo, SuggestedBoxData } from '@/src/types/otherOtypes';
import axios from 'axios';

export async function suggestBoxData(
  tableName: 'gewebeproben' | 'serumproben' | 'urinproben'
): Promise<SuggestedBoxData | null> {
  try {
    // Fetch the last box info from the backend
    const response = await axios.get<LastBoxInfo>(
      `http://localhost:8000/table/last_box_info`,
      {
        params: { table_name: tableName },
      }
    );




    const { boxnummer, boxzeile, boxspalte } = response.data;
    console.log('response.data', response.data);

    let suggestedBoxnummer = boxnummer;
    let suggestedBoxzeile = boxzeile;
    let suggestedBoxspalte = boxspalte + 1;
    let isNewBox = false;

    

    // Letter sequence for boxzeile
    const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];

    // Check if spalte exceeds 9
    if (suggestedBoxspalte > 9) {
      suggestedBoxspalte = 1;

      // Move to the next letter in the sequence
      const currentIndex = letters.indexOf(suggestedBoxzeile);
      if (currentIndex >= 0 && currentIndex < letters.length - 1) {
        suggestedBoxzeile = letters[currentIndex + 1];
      } else {
        // If the currentIndex is the last letter (I) or invalid, move to a new box
        suggestedBoxzeile = 'A';
        suggestedBoxnummer += 1;
        isNewBox = true;
      }
    }

    

    return {
      suggestedBoxnummer,
      suggestedBoxzeile,
      suggestedBoxspalte,
      isNewBox,
    };
  } catch (error) {
    console.error('no entry was found - setting initial values');
    return {
      suggestedBoxnummer: 1,
      suggestedBoxzeile: 'A',
      suggestedBoxspalte: 1,
      isNewBox: true,
    };
    
  }
}



--------------------------------------------------------------------------------
File Name: proben_wiedereinschleusen.js
Location: ./frontend/src/pages/proben_wiedereinschleusen.js
Content:
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  RadioGroup,
  FormControl,
  FormLabel,
  FormControlLabel,
  Radio,
  Snackbar,
  Alert,
} from '@mui/material';
import { IoMdArrowRoundBack } from "react-icons/io";
import axios from 'axios';

export default function ProbeAusschleusen() {
  const [barcodeId, setBarcodeId] = useState('');
  const [selectedProbe, setSelectedProbe] = useState('serum'); // Default probe type
  const [errors, setErrors] = useState({});
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  const handleScan = (e) => {
    setBarcodeId(e.target.value);
  };

  const handleProbeChange = (e) => {
    setSelectedProbe(e.target.value);
  };

  const validateForm = () => {
    const newErrors = {};

    if (!barcodeId.trim()) {
      newErrors.barcodeId = 'Barcode ID darf nicht leer sein.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      console.log('Trying to submit data:', barcodeId);

      const response = await axios.patch(
        `http://localhost:8000/wiedereingeschleusen/${selectedProbe}/${barcodeId}`,
        null, // No body required as per your backend logic
        {
          headers: { 'Content-Type': 'application/json' },
        }
      );
      console.log('Data submitted successfully:', response.data);

      // Show success snackbar notification
      setSnackbarMessage(`Probe mit der Barcode Nummer ${barcodeId} erfolgreich erneut Eingeschleust!`);
      setSnackbarSeverity('success');
      setSnackbarOpen(true);

      // Clear the form
      setBarcodeId('');
    } catch (error) {
      console.error('Error submitting data:', error);

      // Show error snackbar notification
      setSnackbarMessage('Falsche Barcode ID oder Probenart!');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>
      <Box sx={{ position: 'absolute', top: 90, left: 16 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => (window.location.href = '/overview')}
        >
          <IoMdArrowRoundBack className="text-2xl" />
        </Button>
      </Box>
      <Box sx={{ textAlign: 'center', mt: 4, mb: 2 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Proben wieder einschleusen
        </Typography>
      </Box>

      {/* Proben RadioGroup */}
      <FormControl component="fieldset" margin="normal">
        <FormLabel id="proben-label">Probenart</FormLabel>
        <RadioGroup
          aria-labelledby="proben-label"
          name="proben"
          value={selectedProbe}
          onChange={handleProbeChange}
          row
        >
          <FormControlLabel value="serum" control={<Radio />} label="Serumproben" />
          <FormControlLabel value="gewebe" control={<Radio />} label="Gewebeproben" />
          <FormControlLabel value="urin" control={<Radio />} label="Urinproben" />
        </RadioGroup>
      </FormControl>

      <TextField
        label="Scannerfeld für Barcode ID"
        name="barcodeId"
        value={barcodeId}
        onChange={handleScan}
        fullWidth
        margin="normal"
        error={Boolean(errors.barcodeId)}
        helperText={errors.barcodeId}
        autoFocus
      />
      <Button
        variant="contained"
        color="primary"
        onClick={handleSubmit}
        fullWidth
        sx={{ mt: 2 }}
      >
        Probe ausschleusen
      </Button>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
      >
        <Alert
          onClose={() => setSnackbarOpen(false)}
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}


--------------------------------------------------------------------------------
File Name: _app.js
Location: ./frontend/src/pages/_app.js
Content:
import '../styles/globals.css'; // Import global styles including custom fonts
import RootLayout from '../components/RootLayout';

function MyApp({ Component, pageProps }) {
  return (
    <RootLayout>
      <Component {...pageProps} />
      
    </RootLayout>
    
  );
}

export default MyApp;

--------------------------------------------------------------------------------
File Name: proben_einschleusen.js
Location: ./frontend/src/pages/proben_einschleusen.js
Content:
// src/SampleForm.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  TextField,
  Typography,
  Button,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Snackbar,
  Alert,
} from '@mui/material';
import { IoMdArrowRoundBack } from "react-icons/io";
import { suggestBoxData } from '../components/custom_functions/suggestBoxData';
import dayjs from 'dayjs';

require('dotenv').config();

export default function SampleForm() {
  const [formData, setFormData] = useState({
    patient_Id_intern: '',
    probenart: '',
    time: '',
    abholer: '',
    lagerraum: '1029',
    boxspalte: '',
    boxzeile: '',
    barcode_id: '',
    boxnummer: '',
    anmerkungen: '',
    created_at: '',
    uhrzeit: '',
    sap_id: '',
    remarks: '',
  });


  /////////////// useEffect here ///////////////

  // State to track errors
  const [errors, setErrors] = useState({});
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success'); // 'success' or 'error'
  const [updateBox, setUpdateBox] = useState(false);

  useEffect(() => {
    if (formData.probenart) {
      fetchAndSuggestBoxData(formData.probenart);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [formData.probenart, updateBox]);


  ///////////////////////////////////////////////////////////

  // implementing the Box data suggestion functionality
  // Function to fetch and suggest box data
  const fetchAndSuggestBoxData = async (probenart) => {
    try {
      // Map probenart to the corresponding table name
      const tableName =
        probenart === 'gewebe'
          ? 'gewebeproben'
          : probenart === 'serum'
            ? 'serumproben'
            : probenart === 'urin'
              ? 'urinproben'
              : null;

      if (!tableName) return;

      const suggestion = await suggestBoxData(tableName);
      console.log('Suggested box data: ZEILEEEE', suggestion.suggestedBoxzeile);

      if (suggestion) {
        setFormData((prevData) => ({
          ...prevData,

          boxnummer: suggestion.suggestedBoxnummer.toString(),
          boxzeile: suggestion.suggestedBoxzeile,
          boxspalte: suggestion.suggestedBoxspalte.toString(),
        }));

        if (suggestion.isNewBox) {
          setSnackbarMessage(
            `Eine neue Box (Boxnummer: ${suggestion.suggestedBoxnummer}) wird verwendet.`
          );
          setSnackbarSeverity('info');
          setSnackbarOpen(true);
        }
      }
    } catch (error) {
      console.error('Error suggesting box data:', error);
      setSnackbarMessage('Fehler beim Vorschlagen der Boxdaten.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  /////////////// helper functions here ///////////////

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    // Clear the error for the field as the user types
    setErrors({ ...errors, [name]: '' });
    console.log('Formdata CHANGED:', formData.boxzeile);
  };

  const handleClear = () => {
    setFormData((prevData) => ({
      ...prevData, // Spread the previous formData to keep existing fields
      // Only clear the fields you want to reset
      lagerraum: '',
      boxspalte: '',
      boxzeile: '',
      barcode_id: '',
      boxnummer: '',
      anmerkungen: '',
      remarks: '',
    }));
    setErrors({});
    setUpdateBox(prev => !prev);

  
  };

  const handleSubmit = async () => {
    const newErrors = {};
    const isValidInteger = (value) => /^\d+$/.test(value);
    const isValidDate = (value) => /^\d{4}-\d{2}-\d{2}$/.test(value);
    const isValidTime = (value) => /^([0-1]\d|2[0-3]):([0-5]\d)$/.test(value);


    if (!formData.probenart) newErrors.probenart = 'Probenart ist erforderlich.';
    if (!formData.patient_Id_intern) newErrors.patient_Id_intern = 'Patienten ID ist erforderlich.';
    if (!formData.lagerraum) newErrors.lagerraum = 'Lagerraum ist erforderlich.';
    if (!formData.created_at || !isValidDate(formData.created_at)) {
      newErrors.created_at = 'Datum ist erforderlich und muss im Format JJJJ-MM-TT sein.';
    }

    if (formData.probenart === 'gewebe') {
      if (!formData.boxnummer || !isValidInteger(formData.boxnummer)) {
        newErrors.boxnummer = 'Boxnummer ist erforderlich und muss eine ganze Zahl sein.';
      }
      if (!formData.boxzeile ) {
        newErrors.boxzeile = 'Boxzeile ist erforderlich.';
      }
      const boxspalteNumber = parseInt(formData.boxspalte, 10); // Convert to number
    if (!formData.boxspalte || !isValidInteger(formData.boxspalte) || boxspalteNumber > 9 || boxspalteNumber === 0) {
      newErrors.boxspalte = 'Boxspalte ist erforderlich und muss eine ganze Zahl zwischen 1-9 sein.';
    }
      if (!formData.uhrzeit || !isValidTime(formData.uhrzeit)) {
        newErrors.uhrzeit = 'Uhrzeit ist erforderlich und muss im Format HH:MM sein.';
      }
      if (!formData.abholer)
        newErrors.abholer = 'Abholer ist erforderlich.';
      if (!formData.barcode_id)
        newErrors.barcode_id = 'Barcode ist erforderlich.';

    } else if (formData.probenart === 'serum' || formData.probenart === 'urin') {
      if (!formData.boxnummer || !isValidInteger(formData.boxnummer)) {
        newErrors.boxnummer = 'Boxnummer ist erforderlich und muss eine ganze Zahl sein.';
      }
      if (!formData.boxzeile ) {
        newErrors.boxzeile = 'Boxzeile ist erforderlich.';
      }
      const boxspalteNumber = parseInt(formData.boxspalte, 10); // Convert to number
    if (!formData.boxspalte || !isValidInteger(formData.boxspalte) || boxspalteNumber > 9 || boxspalteNumber === 0) {
      newErrors.boxspalte = 'Boxspalte ist erforderlich und muss eine ganze Zahl zwischen 1-9 sein.';
    }
      if (!formData.barcode_id) newErrors.barcode_id = 'Barcode ist erforderlich.';
    }
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    setErrors({});

    // Format created_at as a string in YYYY-MM-DD
    const formattedCreatedAt = formData.created_at
      ? dayjs(formData.created_at).format('YYYY-MM-DD')
      : '';

    const filteredData = {
      probenart: formData.probenart,
      barcode_id: formData.barcode_id,
      patient_Id_intern: formData.patient_Id_intern,
      lagerraum: formData.lagerraum,
      boxnummer: parseInt(formData.boxnummer, 10),
      boxzeile: formData.boxzeile,
      boxspalte: parseInt(formData.boxspalte, 10),
      anmerkungen: formData.anmerkungen,
      created_at: formattedCreatedAt,
      uhrzeit: formData.uhrzeit,
      sap_id: formData.sap_id,
      abholer: formData.abholer,
      remarks: formData.remarks,
    };

    try {
      let endpoint = '';
      switch (formData.probenart) {
        case 'gewebe':
          endpoint = 'gewebe';
          break;
        case 'serum':
          endpoint = 'serum';
          break;
        case 'urin':
          endpoint = 'urin';
          break;
        case 'paraffin':
          endpoint = 'paraffin';
          break;
        default:
          throw new Error('Ungültige Probenart ausgewählt.');
      }

      const response = await axios.post(
        `http://localhost:8000/new_data/${endpoint}`,
        filteredData,
        {
          headers: { 'Content-Type': 'application/json' },
        }
      );

      // Success notification
      setSnackbarMessage('Daten erfolgreich gesendet!');
      setSnackbarSeverity('success');
      setSnackbarOpen(true);

      // Clear the form
      handleClear();
    } catch (error) {
      console.error('Error submitting data:', error);

      if (error.response) {
        const message = error.response.data.detail
          ? `Error: ${error.response.data.detail}`
          : 'Fehler beim Senden der Daten.';
        setSnackbarMessage(message);
        setSnackbarSeverity('error');
      } else {
        setSnackbarMessage('Netzwerkfehler. Bitte versuchen Sie es erneut.');
        setSnackbarSeverity('error');
      }

      setSnackbarOpen(true);
    }
  };


  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbarOpen(false);
  };


  ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////


  return (
    <Box sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>

      <Box sx={{ position: 'absolute', top: 90, left: 16 }}>
        <Button variant="contained" color="primary" onClick={() => window.location.href = '/overview'}>
          <IoMdArrowRoundBack className='text-2xl' />
        </Button>
      </Box>


      <Box
        sx={{
          textAlign: 'center',
          mt: 4,
          mb: 2,
        }}
      >
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Proben Einschleusen
        </Typography>
      </Box>



      {/* Probenart Select Field */}
      <FormControl variant="outlined" fullWidth margin="normal" error={Boolean(errors.probenart)}>
        <InputLabel>Probenart</InputLabel>
        <Select
          name="probenart"
          value={formData.probenart}
          onChange={handleChange}
          label="Probenart"
        >
          <MenuItem value="gewebe">Gewebeproben</MenuItem>
          <MenuItem value="serum">Serumproben</MenuItem>
          <MenuItem value="urin">Urinproben</MenuItem>
          <MenuItem value="paraffin">Paraffinproben</MenuItem>
        </Select>
        {errors.probenart && (
          <Typography variant="caption" color="error">
            {errors.probenart}
          </Typography>
        )}
      </FormControl>

      {/* Patienten ID TextField */}
      <TextField
        label="Patienten ID (Intern)"
        name="patient_Id_intern"
        value={formData.patient_Id_intern}
        onChange={handleChange}
        fullWidth
        margin="normal"
        error={Boolean(errors.patient_Id_intern)}
        helperText={errors.patient_Id_intern}
      />

      {/* Conditional Fields for Gewebe */}
      {formData.probenart === 'gewebe' && (
        <Box sx={{ mt: 2 }}>
          {/* Barcode ID */}
          <TextField
            label="Scannerfeld für Barcode ID"
            name="barcode_id"
            value={formData.barcode_id}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.barcode_id)}
            helperText={errors.barcode_id}
          />

          {/* Datum */}
          <TextField
            label="Datum"
            name="created_at"
            type="date"
            value={formData.created_at}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
            error={Boolean(errors.created_at)}
            helperText={errors.created_at}
          />

          {/* Uhrzeit */}
          <TextField
            label="Probe erhalten (Uhrzeit)"
            name="uhrzeit"
            type="time"
            value={formData.uhrzeit}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
            error={Boolean(errors.uhrzeit)}
            helperText={errors.uhrzeit}
          />
          {/* Probenabholer*in Select Field */}
          <FormControl
            variant="outlined"
            fullWidth
            margin="normal"
            error={Boolean(errors.abholer)}
          >
            <InputLabel>Probenabholer*in</InputLabel>
            <Select
              name="abholer"
              value={formData.abholer}
              onChange={handleChange}
              label="Probenabholer*in"
            >
              <MenuItem value="1">{process.env.NEXT_PUBLIC_ABHOLER_ONE}</MenuItem>
              <MenuItem value="2">{process.env.NEXT_PUBLIC_ABHOLER_TWO}</MenuItem>
              <MenuItem value="3">{process.env.NEXT_PUBLIC_ABHOLER_THREE}</MenuItem>
              <MenuItem value="4">{process.env.NEXT_PUBLIC_ABHOLER_FOUR}</MenuItem>
              <MenuItem value="5">{process.env.NEXT_PUBLIC_ABHOLER_FIVE}</MenuItem>
              <MenuItem value="6">{process.env.NEXT_PUBLIC_ABHOLER_SIX}</MenuItem>
              <MenuItem value="7">Andere</MenuItem>
            </Select>
            {errors.abholer && (
              <Typography variant="caption" color="error">
                {errors.abholer}
              </Typography>
            )}
          </FormControl>

          {/* Raum */}
          <TextField
            label="Raum"
            name="lagerraum"
            value={formData.lagerraum}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.lagerraum)}
            helperText={errors.lagerraum}
          />

          {/* Boxnummer */}
          <TextField
            label="Boxnummer"
            name="boxnummer"
            type="number"
            value={formData.boxnummer}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxnummer)}
            helperText={errors.boxnummer}
          />

          {/* Boxzeile */}
          <FormControl variant="outlined" fullWidth margin="normal" error={Boolean(errors.boxzeile)}>
            <InputLabel>Boxzeile</InputLabel>
            <Select
              name="boxzeile"
              value={formData.boxzeile}
              onChange={handleChange}
              label="Boxzeile"
            >
              {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'].map((letter) => (
                <MenuItem key={letter} value={letter}>
                  {letter}
                </MenuItem>
              ))}
            </Select>
            {errors.boxzeile && (
              <Typography variant="caption" color="error">
                {errors.boxzeile}
              </Typography>
            )}
          </FormControl>


          {/* Boxspalte */}
          <TextField
            label="Boxspalte"
            name="boxspalte"
            type="number"
            value={formData.boxspalte}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxspalte)}
            helperText={errors.boxspalte}
          />

          {/* Besonderheiten/Anmerkungen */}
          <TextField
            label="Besonderheiten/Anmerkungen (bei Probennahme)"
            name="anmerkungen"
            value={formData.anmerkungen}
            onChange={handleChange}
            fullWidth
            margin="normal"
            multiline
            rows={4}
            error={Boolean(errors.anmerkungen)}
            helperText={errors.anmerkungen}
          />

          {/* Bemerkungen */}
          <TextField
            label="Bemerkungen (während Probenaufbereitung)"
            name="remarks"
            value={formData.remarks}
            onChange={handleChange}
            fullWidth
            margin="normal"
            multiline
            rows={4}
            error={Boolean(errors.remarks)}
            helperText={errors.remarks}
          />
        </Box>
      )}

      {/* Conditional Fields for Serum */}
      {formData.probenart === 'serum' && (
        <Box sx={{ mt: 2 }}>
          {/* Barcode ID */}
          <TextField
            label="Scannerfeld für Barcode ID"
            name="barcode_id"
            value={formData.barcode_id}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.barcode_id)}
            helperText={errors.barcode_id}
          />

          {/* Datum */}
          <TextField
            label="Datum"
            name="created_at"
            type="date"
            defaultValue="2024-09-29"
            value={formData.created_at}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
            error={Boolean(errors.created_at)}
            helperText={errors.created_at}
          />

          {/* Raum */}
          <TextField
            label="Raum"
            name="lagerraum"
            defaultValue="1027"
            value={formData.lagerraum}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.lagerraum)}
            helperText={errors.lagerraum}
          />

          {/* Boxnummer */}
          <TextField
            label="Boxnummer"
            name="boxnummer"
            type="number"
            value={formData.boxnummer}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxnummer)}
            helperText={errors.boxnummer}
          />

          {/* Boxzeile */}
          <FormControl variant="outlined" fullWidth margin="normal" error={Boolean(errors.boxzeile)}>
            <InputLabel>Boxzeile</InputLabel>
            <Select
              name="boxzeile"
              value={formData.boxzeile}
              onChange={handleChange}
              label="Boxzeile"
            >
              {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'].map((letter) => (
                <MenuItem key={letter} value={letter}>
                  {letter}
                </MenuItem>
              ))}
            </Select>
            {errors.boxzeile && (
              <Typography variant="caption" color="error">
                {errors.boxzeile}
              </Typography>
            )}
          </FormControl>

          {/* Boxspalte */}
          <TextField
            label="Boxspalte"
            name="boxspalte"
            type="number"
            value={formData.boxspalte}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxspalte)}
            helperText={errors.boxspalte}
          />

          {/* Besonderheiten */}
          <TextField
            label="Besonderheiten"
            name="anmerkungen"
            value={formData.anmerkungen}
            onChange={handleChange}
            fullWidth
            margin="normal"
            multiline
            rows={4}
            error={Boolean(errors.anmerkungen)}
            helperText={errors.anmerkungen}
          />
        </Box>
      )}

      {/* Conditional Fields for Urin */}
      {formData.probenart === 'urin' && (
        <Box sx={{ mt: 2 }}>
          {/* Barcode ID */}
          <TextField
            label="Scannerfeld für Barcode ID"
            name="barcode_id"
            value={formData.barcode_id}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.barcode_id)}
            helperText={errors.barcode_id}
          />

          {/* Datum */}
          <TextField
            label="Datum"
            name="created_at"
            type="date"
            value={formData.created_at}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
            error={Boolean(errors.created_at)}
            helperText={errors.created_at}
          />

          {/* Raum */}
          <TextField
            label="Raum"
            name="lagerraum"
            defaultValue="1027"
            value={formData.lagerraum}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.lagerraum)}
            helperText={errors.lagerraum}
          />

          {/* Boxnummer */}
          <TextField
            label="Boxnummer"
            name="boxnummer"
            type="number"
            value={formData.boxnummer}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxnummer)}
            helperText={errors.boxnummer}
          />

          {/* Boxzeile */}
          <FormControl variant="outlined" fullWidth margin="normal" error={Boolean(errors.boxzeile)}>
            <InputLabel>Boxzeile</InputLabel>
            <Select
              name="boxzeile"
              value={formData.boxzeile}
              onChange={handleChange}
              label="Boxzeile"
            >
              {['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'].map((letter) => (
                <MenuItem key={letter} value={letter}>
                  {letter}
                </MenuItem>
              ))}
            </Select>
            {errors.boxzeile && (
              <Typography variant="caption" color="error">
                {errors.boxzeile}
              </Typography>
            )}
          </FormControl>

          {/* Boxspalte */}
          <TextField
            label="Boxspalte"
            name="boxspalte"
            type="number"
            value={formData.boxspalte}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.boxspalte)}
            helperText={errors.boxspalte}
          />

          {/* Besonderheiten */}
          <TextField
            label="Besonderheiten"
            name="anmerkungen"
            value={formData.anmerkungen}
            onChange={handleChange}
            fullWidth
            margin="normal"
            multiline
            rows={4}
            error={Boolean(errors.anmerkungen)}
            helperText={errors.anmerkungen}
          />
        </Box>
      )}

      {/* Conditional Fields for Paraffin */}
      {formData.probenart === 'paraffin' && (
        <Box sx={{ mt: 2 }}>
          {/* Datum */}
          <TextField
            label="Datum"
            name="created_at"
            type="date"
            value={formData.created_at}
            onChange={handleChange}
            fullWidth
            margin="normal"
            InputLabelProps={{ shrink: true }}
            error={Boolean(errors.created_at)}
            helperText={errors.created_at}
          />

          {/* Raum */}
          <TextField
            label="Raum"
            name="lagerraum"
            value={formData.lagerraum}
            onChange={handleChange}
            fullWidth
            margin="normal"
            error={Boolean(errors.lagerraum)}
            helperText={errors.lagerraum}
          />

          {/* Besonderheiten */}
          <TextField
            label="Besonderheiten"
            name="anmerkungen"
            value={formData.anmerkungen}
            onChange={handleChange}
            fullWidth
            margin="normal"
            multiline
            rows={4}
            error={Boolean(errors.anmerkungen)}
            helperText={errors.anmerkungen}
          />
        </Box>
      )}

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbarSeverity} sx={{ width: '100%' }} elevation={6}
          variant="filled">
          {snackbarMessage}
        </Alert>
      </Snackbar>


      {/* Action Buttons */}
      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>
        <Button variant="outlined" color="secondary" onClick={handleClear}>
          Clear All
        </Button>
        <Button variant="contained" color="primary" onClick={handleSubmit}>
          Senden
        </Button>
      </Box>


    </Box>


  );
}


--------------------------------------------------------------------------------
File Name: patient_anlegen.js
Location: ./frontend/src/pages/patient_anlegen.js
Content:
// src/PatientForm.js
import React, { useState } from 'react';
import axios from 'axios';
import {
  Box,
  TextField,
  Radio,
  RadioGroup,
  FormControl,
  FormLabel,
  FormControlLabel,
  Button,
  Typography,
  Snackbar,
  Alert,
} from '@mui/material';
import { IoMdArrowRoundBack } from "react-icons/io";


export default function PatientForm() {
  // Corrected initial state keys to match input field names
  const [formData, setFormData] = useState({
    patient_Id_intern: '',
    geschlecht: '',
    alter: '',
    sap_id: '',
    op_diagnose: '',
    plannedSurgery: '',
    bemerkung: '',
    created_at: '',
    op_geplant: '',
  });


  



  // State for handling field errors
  const [errors, setErrors] = useState({});

  // State for handling notifications
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success', // 'success', 'error', 'info', 'warning'
  });

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    // Clear the error for the field as the user types
    if (errors[name]) {
      setErrors({ ...errors, [name]: '' });
    }
  };

  // Clear the form fields and errors
  const handleClear = () => {
    setFormData({
      patient_Id_intern: '',
      geschlecht: '',
      alter: '',
      sap_id: '',
      op_diagnose: '',
      plannedSurgery: '',
      bemerkung: '',
      created_at: '',
      op_geplant: '',
    });
    setErrors({});
  };

  // Close the notification Snackbar
  const handleNotificationClose = (event, reason) => {
    if (reason === 'clickaway') return;
    setNotification({ ...notification, open: false });
  };

  // Validate the form data
  const validateForm = () => {
    const newErrors = {};
    const { patient_Id_intern, geschlecht, alter, op_diagnose, op_geplant, created_at, sap_id } = formData;

    // Required fields except 'bemerkung'
    if (!patient_Id_intern.trim()) {
      newErrors.patient_Id_intern = 'Patienten ID ist erforderlich.';
    }

    if (!geschlecht.trim()) {
      newErrors.geschlecht = 'Geschlecht ist erforderlich.';
    }

    if (!alter.toString().trim()) {
      newErrors.alter = 'Alter ist erforderlich.';
    } else {
      const ageNumber = Number(alter);
      if (!Number.isInteger(ageNumber) || ageNumber <= 0) {
        newErrors.alter = 'Bitte geben Sie ein gültiges Alter ein.';
      }
    }

    if (!op_diagnose.trim()) {
      newErrors.op_diagnose = 'Diagnose ist erforderlich.';
    }

    if (!op_geplant.trim()) {
      newErrors.op_geplant = 'Art der OP ist erforderlich.';
    }

    if (!sap_id.trim()) {
      newErrors.sap_id = 'SAP ID ist erforderlich.';
    }

    if (!created_at.trim()) {
      newErrors.created_at = 'Datum ist erforderlich.';
    } else {
      // Optional: Validate date format (YYYY-MM-DD)
      const isValidDate = /^\d{4}-\d{2}-\d{2}$/.test(created_at);
      if (!isValidDate) {
        newErrors.created_at = 'Datum muss im Format JJJJ-MM-TT sein.';
      }
    }



    // Add more validations if necessary for other fields

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return false;
    }

    return true;
  };

  // Handle form submission
  const handleSubmit = async () => {
    console.log('Button clicked');

    // Perform validation
    if (!validateForm()) {
      // Show error notification
      setNotification({
        open: true,
        message: 'Bitte beheben Sie die Fehler im Formular.',
        severity: 'error',
      });
      return;
    }

    // Prepare data to send (convert 'alter' to integer)
    const dataToSend = {
      ...formData,
      alter: Number(formData.alter),
    };

    try {
      console.log('formData before sending:', dataToSend);
      const response = await axios.post(
        `http://localhost:8000/new_data/patient`,
        dataToSend,
        {
          headers: { 'Content-Type': 'application/json' },
        }
      );
      console.log('Data submitted successfully:', response.data);

      // Show success notification
      setNotification({
        open: true,
        message: 'Patientendaten erfolgreich gesendet!',
        severity: 'success',
      });

      // Optionally, clear the form after successful submission
      handleClear();
    } catch (error) {
      console.error('Error submitting data:', error);
      console.log(error.response.data);

      // Extract error message from response if available
      const errorMessage =
        `${error.response?.data?.detail || 'Fehler beim Senden der Daten.'} ${error.response?.data?.detail && error.response.data.detail.length > 0
          ? `: ${error.response.data.detail[0].msg}, ${error.response.data.detail[0].loc?.[1] || ''}`
          : ''
        }`;

      // Show error notification
      setNotification({
        open: true,
        message: errorMessage,
        severity: 'error',
      });
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>

      <Box sx={{ position: 'absolute', top: 90, left: 16 }}>
        <Button variant="contained" color="primary" onClick={() => window.location.href = '/overview'}>
          <IoMdArrowRoundBack className='text-2xl' />
        </Button>
      </Box>

      <Box
        sx={{
          textAlign: 'center',
          mt: 4,
          mb: 2,
        }}
      >
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Patienten Anlegen
        </Typography>
      </Box>

      {/* Patienten ID TextField */}
      <TextField
        label="Patienten ID (intern)"
        name="patient_Id_intern"
        value={formData.patient_Id_intern}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        error={Boolean(errors.patient_Id_intern)}
        helperText={errors.patient_Id_intern}
      />

      {/* Datum TextField */}
      <TextField
        label="Datum"
        name="created_at"
        type="date"
        value={formData.created_at}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        InputLabelProps={{ shrink: true }}
        error={Boolean(errors.created_at)}
        helperText={errors.created_at}
      />

      {/* Geschlecht RadioGroup */}
      <FormControl component="fieldset" margin="normal" required error={Boolean(errors.geschlecht)}>
        <FormLabel id="geschlecht-label">Geschlecht</FormLabel>
        <RadioGroup
          aria-labelledby="geschlecht-label"
          name="geschlecht"
          value={formData.geschlecht}
          onChange={handleChange}
          row
        >
          <FormControlLabel value="Weiblich" control={<Radio />} label="Weiblich" />
          <FormControlLabel value="Männlich" control={<Radio />} label="Männlich" />
          <FormControlLabel value="Divers" control={<Radio />} label="Divers" />
        </RadioGroup>
        {errors.geschlecht && (
          <Typography variant="caption" color="error">
            {errors.geschlecht}
          </Typography>
        )}
      </FormControl>

      {/* Alter TextField */}
      <TextField
        label="Alter"
        name="alter"
        type="number"
        value={formData.alter}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        inputProps={{ min: 0 }}
        error={Boolean(errors.alter)}
        helperText={errors.alter}
      />

      {/* SAP ID TextField */}
      <TextField
        label="Pat. ID im SAP"
        name="sap_id"
        type="number"
        value={formData.sap_id}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        error={Boolean(errors.sap_id)}
        helperText={errors.sap_id}
      />

      {/* Diagnose TextField */}
      <TextField
        label="OP Diagnose"
        name="op_diagnose"
        value={formData.op_diagnose}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        error={Boolean(errors.op_diagnose)}
        helperText={errors.op_diagnose}
      />

        <TextField
        label="Geplante OP"
        name="op_geplant"
        value={formData.op_geplant}
        onChange={handleChange}
        fullWidth
        margin="normal"
        required
        error={Boolean(errors.op_geplant)}
        helperText={errors.op_geplant}
      />

      {/* Bemerkungen TextField (Optional) */}
      <TextField
        label="Bemerkungen"
        name="bemerkung"
        value={formData.bemerkung}
        onChange={handleChange}
        fullWidth
        margin="normal"
        multiline
        rows={4}
      />

      {/* Action Buttons */}
      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>
        <Button variant="outlined" color="secondary" onClick={handleClear}>
          Clear All
        </Button>
        <Button variant="contained" color="primary" onClick={handleSubmit}>
          Senden
        </Button>
      </Box>

      {/* Notification Snackbar */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleNotificationClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={handleNotificationClose}
          severity={notification.severity}
          sx={{ width: '100%' }}
          elevation={6}
          variant="filled"
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
}


--------------------------------------------------------------------------------
File Name: data_overview.js
Location: ./frontend/src/pages/data_overview.js
Content:
import { gewebeprobenDataColumns } from '../types/gewebeprobenColumns';
import { patientDataColumns } from '../types/patientColumns';
import { serumprobenDataColumns } from '../types/serumprobenColumns';
import { urinprobenDataColumns } from '../types/urinprobenColumns';
import { paraffinprobenDataColumns } from '../types/paraffinprobenColumns';
import dayjs from 'dayjs';
import axios from 'axios';
import React, { useState, useEffect, useRef } from 'react';
import InfoIcon from '@mui/icons-material/Info';
//import InfoIcon from '@mui/icons-material/Info';
import {
  Box,
  TextField,
  Button,
  Typography,
  Popover,
  IconButton,
  DialogTitle,
  DialogContentText,
  DialogContent,
  DialogActions,
  Dialog,
  Snackbar,
} from '@mui/material';


// Mapping der Tabellen-Spalten für dynamisches Rendern
const TABLE_COLUMNS = {
  paraffinproben: paraffinprobenDataColumns,
  gewebeproben: gewebeprobenDataColumns,
  serumproben: serumprobenDataColumns,
  urinproben: urinprobenDataColumns,
  patient: patientDataColumns,
};

// definition für probenstatus mapping
const STATUS_MAPPING = {
  1: "eingescheust",
  2: "ausgeschleust",
  3: "wiedereingeschleust",
}
const ABHOLER_MAPPING = {
  1: process.env.NEXT_PUBLIC_ABHOLER_ONE,
  2: process.env.NEXT_PUBLIC_ABHOLER_TWO,
  3: process.env.NEXT_PUBLIC_ABHOLER_THREE,
  4: process.env.NEXT_PUBLIC_ABHOLER_FOUR,
  5: process.env.NEXT_PUBLIC_ABHOLER_FIVE,
  6: process.env.NEXT_PUBLIC_ABHOLER_SIX,
  7: "Andere"
}

require('dotenv').config();

export default function Uebersicht() {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedTable, setSelectedTable] = useState(null);
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]); 
  const [editRowIndex, setEditRowIndex] = useState(null); 
  const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState(""); 
  const [selectedColumn, setSelectedColumn] = useState(""); 
  const dropdownRef = useRef(null);
  const tableScrollRef = useRef(null);
  const [Table_header, setTable_header] = useState(""); // Keep React state setter
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [openPsw, setOpen] = useState()
  const [openCheck, setOpenCheck] = useState()
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleClickOpenPASSW = () => {
    setOpen(true);
  };

  // Handle closing the dialog
  const handleClosePASSW = () => {
    setOpen(false);
    setError(""); // Reset error state when closing
  };

  // Handle Check change
  const handleOpenCheck = () => {
    setOpenCheck(true); 
  };
  
  // Handle Check change
  const handleCloseCheck = (e) => {
    setOpenCheck(false);
    setError(""); // Reset error state when closing
  };


  const open = Boolean(anchorEl);
  const id = open ? 'simple-popover' : undefined;
  useEffect(() => {
    // Dynamically update Table_header whenever selectedTable changes
    if (selectedTable === "urinproben") {
      setTable_header("Urinproben");
    } else if (selectedTable === "serumproben") {
      setTable_header("Serumproben");
    } else if (selectedTable === "gewebeproben") {
      setTable_header("Gewebeproben");
    } else if (selectedTable === "paraffinproben") {
      setTable_header("Paraffinproben");
    } else if (selectedTable === "patient") {
      setTable_header("Patient");
    } else {
      setTable_header("");
    }
  }, [selectedTable]); // Dependency on selectedTable
  

  const toggleDropdown = () => setIsOpen(!isOpen);

  const handleTable = async (e) => {
    e.preventDefault();
    const tableName = e.currentTarget.textContent?.trim().toLowerCase();  // Tabellenname in Kleinbuchstaben
    setSelectedTable(tableName);

    if (!TABLE_COLUMNS[tableName]) {
      setError("Invalid table name");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await axios.get(`http://localhost:8000/table/data?table_name=${tableName}`);
      setData(response.data);
      console.log('here the data of the selected table',response.data);
      setFilteredData(response.data); // Initialize filtered data with fetched data
    } catch (error) {
      setError('Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };
  
  // Handle search for specific column
  const handleSearchChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);

    if (query === "") {
      setFilteredData(data); // If the search query is empty, show all data
    } else {
      const lowercasedQuery = query.toLowerCase();
      const filtered = data.filter((row) => {
        if (selectedColumn && row[selectedColumn]) {
          return row[selectedColumn].toString().toLowerCase().includes(lowercasedQuery);
        }
        return Object.keys(row).some((key) =>
          row[key] && row[key].toString().toLowerCase().includes(lowercasedQuery)
        );
      });
      setFilteredData(filtered); // Set filtered data based on search query
    }
  };

  // Handle column selection for search filter
  const handleColumnSelect = (e) => {
    setSelectedColumn(e.target.value);
  };

  useEffect(() => {
    if (selectedTable) {
      setIsOpen(false);
    }
  }, [selectedTable]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);

  // Handle Edit Click
  const handleEditClick = (index, rowData) => {
    setEditRowIndex(index);
    setFormData({ ...rowData }); // Die aktuellen Zeilendaten im Bearbeitungsformular laden
    handleCloseCheck();
  };

  // Handle Cancel Edit
  const handleCancelEdit = () => {
    setEditRowIndex(null);
    setFormData({});
  };

  const handleSave = async () => {
    if (!selectedTable) {
      console.error("No table selected for updating data");
      return;
    }
  
    try {
      const payload = { ...formData }; // Include the updated row data
      const response = await axios.put(
        `http://localhost:8000/update/${selectedTable}`,
        payload,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      // Update the table data with the response
      setData((prevData) =>
        prevData.map((row, index) =>
          index === editRowIndex ? response.data : row
        )
      );
      setFilteredData((prevFiltered) =>
        prevFiltered.map((row, index) =>
          index === editRowIndex ? response.data : row
        )
      );

      setEditRowIndex(null); // Exit edit mode
      setFormData({});
    } catch (error) {
      console.error("Failed to update data", error);
    }
  };


  const handleDelete = async (row) => {
    console.log(row);
    let payload;
    try {
      // Prepare the payload to send, including the required fields
      if (selectedTable === "paraffinproben") {
        payload = {
          id: row.id,
          probenart: row.probenart,
          patient_Id_intern: row.patient_Id_intern,
        };
      } else {
        payload = {
          patient_Id_intern: row.patient_Id_intern,
          probenart: row.probenart,
          barcode_id: row.barcode_id,
        };
      }

      console.log("Payload to delete:", payload); // Log the payload for debugging
  
      // Make the DELETE request
      const response = await axios.delete(
        `http://localhost:8000/delete/${selectedTable}`,
        {
          headers: {
            "Content-Type": "application/json", // Set the content type
          },
          data: payload, // Send the payload as 'data'
        }
      );
      console.log("Response after delete:", response); // Log the response
      
      // Update data after successful delete
      setData((prevData) => prevData.filter((r) => r.rowId !== row.rowId));
      setFilteredData((prevFiltered) => prevFiltered.filter((r) => r.rowId !== row.rowId));
  
      // Fetch updated data after deletion
      const response_update = await axios.get(`http://localhost:8000/table/data?table_name=${selectedTable}`);
  
      // Update state with the new data
      setData(response_update.data);
      setFilteredData(response_update.data);
      console.log('Here is the updated data after deletion:', response_update.data);
    } catch (error) {
      console.error('Error deleting data:', error);
    }
  };
  
  // Table horizontal Scroll logic
  const scrollLeft = () => {
    if (tableScrollRef.current) {
      tableScrollRef.current.scrollBy({ left: -100, behavior: 'smooth' });
    }
  };

  const scrollRight = () => {
    if (tableScrollRef.current) {
      tableScrollRef.current.scrollBy({ left: 100, behavior: 'smooth' });
    }
  };

  const renderTable = () => {
    const columns = TABLE_COLUMNS[selectedTable];
  
    if (!columns || loading) return null;
    if (error) return <p className="text-red-500">{error}</p>;
  
    return (
      <div className="flex justify-center items-center mt-12">
        {/* Left Scroll Button */}
        <button
          onClick={scrollLeft}
          className="absolute left-20 top-1/2 transform -translate-y-1/2 bg-gray-200 p-2 rounded-full shadow-md hover:bg-gray-300"
        >
          ←
        </button>
        <div className="w-full h-[700px] overflow-y-auto" ref={tableScrollRef}>
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-100 sticky top-0 z-10">
              <tr>
                {columns.map((col) => (
                  <th
                    key={col.key}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    {col.label}
                  </th>
                ))}
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Aktionen
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredData.map((row, rowIndex) => (
                <tr key={rowIndex}>
                  {columns.map((col) => (
                    <td
                      key={col.key}
                      className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      {editRowIndex === rowIndex ? (
                    <input
                      value={formData[col.key] || ""}
                      onChange={(e) =>
                        setFormData({ ...formData, [col.key]: e.target.value })
                      }
                      className="border border-gray-300 px-2 py-1"
                    />
                    ) : (
                    col.key === "created_at" ? (
                      // Formatierung für das Datum, falls "created_at"
                      dayjs(row[col.key]).format("DD.MM.YYYY")
                    ) : col.key === "status" && row[col.key] in STATUS_MAPPING ? (
                      // Status anzeigen, falls Status vorhanden
                      STATUS_MAPPING[row[col.key]]
                      ) : col.key === "abholer" && row[col.key] in ABHOLER_MAPPING ? (
                        // Mapping der Abholer
                        ABHOLER_MAPPING[row[col.key]]
                    ) : row[col.key] !== null ? (
                      row[col.key]
                    ) : (
                      "N/A"
                      )) }
                    </td>
                  ))}
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {editRowIndex === rowIndex ? (
                      <>
                        <Button
                          onClick={() => handleSave(row.id)}
                          variant="outlined"
                          color="success" // Matches "text-green" style
                          size='small'
                        >
                          Speichern
                        </Button>
                        <Button
                          onClick={handleCancelEdit}
                          variant="outlined"
                          color="error" // Matches "text-green" style
                          size='small'
                        >
                          Abbrechen
                        </Button>
                      </>
                    ) : (
                      <>
                        <Button
                          onClick={() => handleEditClick(rowIndex, row)}
                          variant="outlined" 
                          color="primary" 
                          size='small'
                          >
                          Bearbeiten
                        </Button>
                        <React.Fragment>
                        <Button variant="outlined" color="error" size='small' onClick={handleClickOpenPASSW}>
                          Löschen
                        </Button>
                        <Dialog
                          open={openPsw}
                          onClose={handleClosePASSW}
                          PaperProps={{
                            component: "form",
                            onSubmit: (event) => {
                              event.preventDefault();
                              const formData = new FormData(event.currentTarget);
                              const formJson = Object.fromEntries(formData.entries());
                              const passcode = formJson.passcode;

                              // Überprüfen, ob der Passcode korrekt ist
                              if (passcode === process.env.NEXT_PUBLIC_DELETE_PASSCODE) {
                                handleDelete(row); // Eintrag löschen
                              } else {
                                alert("Incorrect passcode!"); // Fehlermeldung ausgeben
                              }
                              handleClosePASSW();
                            },
                          }}
                          BackdropProps={{
                            style: {
                              backgroundColor: "rgba(0, 0, 0, 0.2)", // Weniger dunkles Overlay
                            },
                          }}
                        >
                          <DialogTitle>Passwort</DialogTitle>
                          <DialogContent>
                            <DialogContentText></DialogContentText>
                            <TextField
                              autoFocus
                              required
                              margin="dense"
                              id="passcode"
                              name="passcode"
                              label="Passcode"
                              type="password"
                              fullWidth
                              variant="standard"
                            />
                          </DialogContent>
                          <DialogActions>
                            <Button onClick={handleClosePASSW}>Abbrechen</Button>
                            <Button type="submit">Speichern</Button>
                          </DialogActions>
                        </Dialog>
                         {/* Dialog for Check Field */}
                        <Dialog
                        open={openCheck}
                        onClose={handleCloseCheck}
                        PaperProps={{
                          component: "form",
                          onSubmit: (event) => {
                            event.preventDefault(); // Verhindert das Standard-Formularverhalten
                            handleEditClick(rowIndex, row); // Bearbeitungsmodus aktivieren
                          },
                        }}
                        BackdropProps={{
                          style: {
                            backgroundColor: "rgba(0, 0, 0, 0.2)", // Helligkeit Overlay
                          },
                        }}
                      >
                        <DialogTitle>Bearbeitungsmodus Aktivieren?</DialogTitle>
                        <DialogContent>
                          <DialogContentText>
                          </DialogContentText>
                        </DialogContent>
                        <DialogActions>
                          <Button onClick={handleCloseCheck}>Abbrechen</Button>
                          <Button type="submit">Ja</Button>
                        </DialogActions>
                      </Dialog>
                      </React.Fragment>
                      </>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {/* Right Scroll Button */}
        <button
          onClick={scrollRight}
          className="absolute right-20 top-1/2 transform -translate-y-1/2 bg-gray-200 p-2 rounded-full shadow-md hover:bg-gray-300"
        >
          →
        </button>
      </div>
    );
  };

  return (
    <>
      <div className="flex justify-center items-center mt-12">
        <div className="relative" ref={dropdownRef}>
          <button
            onClick={toggleDropdown}
            className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center"
            type="button"
          >
            Tabellenname auswählen
            <svg className="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
              <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 4 4 4-4" />
            </svg>
          </button>

          {isOpen && (
            <div className="absolute z-20 mt-2 bg-white divide-y divide-gray-100 rounded-lg shadow w-44">
              <ul className="py-2 text-sm text-gray-700">
                {Object.keys(TABLE_COLUMNS).map((tableName) => (
                  <li key={tableName}>
                    <a
                      href="#"
                      className="block px-4 py-2 hover:bg-gray-100"
                      onClick={(e) => handleTable(e)}
                    >
                      {tableName.charAt(0).toUpperCase() + tableName.slice(1)}
                    </a>
                </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>

      {/* Filter Input */}
      {selectedTable && (
        <div className="flex margin-left auto mt-4">
          <div className="mr-4">
            <select
              value={selectedColumn}
              onChange={handleColumnSelect}
              className="border border-gray-300 px-4 py-2 rounded"
            >
              <option value="">Alle Spalten</option>
              {TABLE_COLUMNS[selectedTable]?.map((col) => (
                <option key={col.key} value={col.key}>
                  {col.label}
                </option>
              ))}
            </select>
          </div>

          <input
            type="text"
            value={searchQuery}
            onChange={handleSearchChange}
            placeholder="Suche..."
            className="border border-gray-300 px-4 py-2 rounded"
          />
          
          <IconButton onClick={handleClick}><InfoIcon />
          
          </IconButton >
          <Popover
            id={id}
            open={open}
            anchorEl={anchorEl}
            onClose={handleClose}
            anchorOrigin={{
              vertical: 'bottom',
              horizontal: 'left',
            }}
          >
            <Typography variant='caption' fontWeight={'fontWeightBold'} sx={{ display: 'block' }}>
            Anmerkungen zum Filter:
             </Typography>
             <Typography variant='caption' sx={{ display: 'block' }}>
            Erstellungsdatum: yyyy-mm-dd
             </Typography>
             <Typography variant='caption' sx={{ display: 'block' }}>
            Abholer:    1: {process.env.NEXT_PUBLIC_ABHOLER_ONE}  ---
                        2: {process.env.NEXT_PUBLIC_ABHOLER_TWO}  ---
                        3: {process.env.NEXT_PUBLIC_ABHOLER_THREE}  ---
                        4: {process.env.NEXT_PUBLIC_ABHOLER_FOUR}  ---
                        5: {process.env.NEXT_PUBLIC_ABHOLER_FIVE}  ---
                        6: {process.env.NEXT_PUBLIC_ABHOLER_SIX}  ---
                        7: Andere
             </Typography>
             <Typography variant='caption' sx={{ display: 'block' }}>
            Probenstatus:   1: eingescheust   ---
                            2: ausgeschleust  ---
                            3: wiedereingeschleust
             </Typography>
          </Popover>
        </div>
      )}
      <Box
        sx={{
          textAlign: 'center',
          mt: 5,
          height: 10,
        }}
      >
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
        {Table_header}
        </Typography>
      </Box>
      {renderTable()}
    </>
  );
}

--------------------------------------------------------------------------------
File Name: index.js
Location: ./frontend/src/pages/index.js
Content:
import Image from 'next/image';

export default function Home() {
  return (
    <div className="flex justify-center items-center h-screen">
      <div className="relative w-80 h-80 overflow-hidden rounded-full">
        <Image
          src="/leber.jpg"
          alt="Circular image"
          fill
          style={{ objectFit: 'cover' }} // Use inline style for object-fit
        />
      </div>
    </div>
  );
}


--------------------------------------------------------------------------------
File Name: help.js
Location: ./frontend/src/pages/help.js
Content:
'use client'; // Ensure this directive is at the top

import Image from 'next/image';
import { FaBeer, FaCoffee, FaApple } from 'react-icons/fa';
import { useRouter } from 'next/navigation'; // Ensure correct import for router
import { TextField } from '@mui/material';
import { Box, Typography, Divider } from '@mui/material';

require('dotenv').config();

export default function Sonstiges() {
  return (
    <Box
      sx={{
        textAlign: 'center',
        mt: 4,
        mb: 2,
        height: 0,
      }}
    >
      <Typography variant="h4" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
        Need Help?
      </Typography>
      <Box
        sx={{
          mt: 10,
          height: 0,
        }}
      >
        <Typography variant="h6" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Technical Support, Backup and Restoring Support, Administrative Support
        </Typography>
      </Box>
      <Box

        sx={{
          boxShadow: 4,
          borderRadius: 4,
          p: 3,
          m: 7
        }}
      >

        <Box
          sx={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <Typography variant="h6" sx={{ color: 'text.primary' }}>
            {process.env.NEXT_PUBLIC_CONTACT_NAME_ONE}
          </Typography>
          <Typography variant="h6" sx={{ color: 'text.primary' }}>
            {process.env.NEXT_PUBLIC_CONTACT_MAIL_ONE}
          </Typography>
        </Box>
        <Divider sx={{ my: 2 }} />
      </Box>
      <Box
        sx={{
          mt: 10,
          height: 0,
        }}
      ><Typography variant="h6" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          User Support, Administrative Support
        </Typography>
      </Box>
      <Box
        sx={{
          bgcolor: 'background.paper',
          boxShadow: 4,
          borderRadius: 4,
          p: 3,
          m: 7
        }}
      ><Box
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center', // Ensures alignment of title and button
        }}
      >
          <Typography variant="h6" sx={{ fontWeight: 'medium', color: 'text.primary' }}>
            {process.env.NEXT_PUBLIC_CONTACT_NAME_TWO}
          </Typography>
          <Typography variant="h6" sx={{ fontWeight: 'medium', color: 'text.primary' }}>
            {process.env.NEXT_PUBLIC_CONTACT_MAIL_TWO}

          </Typography>
        </Box>
        <Divider sx={{ my: 2 }} />
      </Box>
    </Box>




  )
}


--------------------------------------------------------------------------------
File Name: _document.js
Location: ./frontend/src/pages/_document.js
Content:
import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        {/* Add custom meta tags or links here */}
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}


--------------------------------------------------------------------------------
File Name: overview.js
Location: ./frontend/src/pages/overview.js
Content:
'use client';

import React, { useState, useEffect } from 'react';
import { Box, Typography, Divider } from '@mui/material';
import Link from 'next/link';
import ReusableButton from '../components/button';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import clsx from 'clsx';
import { usePathname } from 'next/navigation';
import { getPatientCount } from '../services/api';
import { getSerumCount } from '../services/api'; 
import { getGewebeCount } from '../services/api'; 
import { getUrinCount } from '../services/api'; 
import { getParaffinCount } from '../services/api'; 

const theme = createTheme({
  palette: {
    background: {
      paper: '#f0f8ff',
    },
    text: {
      primary: '#173A5E',
      secondary: '#46505A',
    },
    action: {
      active: '#001E3C',
    },
    success: {
      main: '#009688',
    },
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
  },
  typography: {
    fontFamily: 'Roboto, sans-serif',
    fontWeightBold: 700,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
        },
      },
    },
  },
});

export default function Overview() {
  const [patient_count, setPatientCount] = useState(0);
  const [serum_count, setSerumCount] = useState(0);
  const [gewebe_count, setGewebeCount] = useState(0);
  const [urin_count, setUrinCount] = useState(0);
  const [paraffin_count, setParaffinCount] = useState(0);
  const location = usePathname();
  const [loading, setLoading] = useState(false); // Ladezustand
  const [error, setError] = useState(null); // Fehlerzustand


  useEffect(() => {
    const fetchData = async (fetchFunction, setFunction, errorMessage) => {
        setLoading(true);
        setError(null);
        try {
            const count = await fetchFunction();
            setFunction(count);
        } catch (error) {
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const fetchCounts = async () => {
        await Promise.all([
            fetchData(getPatientCount, setPatientCount, 'Failed to fetch patient count'),
            fetchData(getSerumCount, setSerumCount, 'Failed to fetch serum count'),
            fetchData(getGewebeCount, setGewebeCount, 'Failed to fetch geweb count'),
            fetchData(getUrinCount, setUrinCount, 'Failed to fetch urin count'),
            fetchData(getParaffinCount, setParaffinCount, 'Failed to fetch urin count'),
        ]);
    };

    fetchCounts();
}, []);

  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={{
          textAlign: 'center',
          mt: 4,
          mb: 2,
          height: 0,
        }}
      >
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Datenabfrage
        </Typography>
      </Box>

      <Box
        sx={{
          bgcolor: 'background.paper',
          boxShadow: 3,
          borderRadius: 4,
          p: 3,
          m: 10,
        }}
      >
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center', // This ensures alignment
          }}
        >
          <Typography variant="h6" sx={{ fontWeight: 'medium', color: 'text.primary' }}>
            Probensammlung
          </Typography>
          <Link
            href="/data_overview"
            className={clsx('text-white font-semibold hover:text-blue-200', {
              underline: location === '/data_overview',
            })}
          >
            <ReusableButton
              buttonVariant="contained"
              buttonColor="primary"
              buttonText="Öffnen"
            />
          </Link>
          </Box>
    <Divider sx={{ my: 2 }} />
    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', flexWrap: 'wrap', gap: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
          {patient_count}
        </Typography>
        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
          Patienten
        </Typography>
      </Box>

      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
          {serum_count}
        </Typography>
        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
          Serumproben
        </Typography>
      </Box>

      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
          {gewebe_count}
        </Typography>
        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
          Gewebeproben
        </Typography>
      </Box>

      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
          {urin_count}
        </Typography>
        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
          Urinproben
        </Typography>
      </Box>
      
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Typography variant="body2" sx={{ color: 'success.dark', fontWeight: 'bold' }}>
          {paraffin_count}
        </Typography>
        <Typography variant="body2" sx={{ color: 'text.secondary' }}>
          Paraffinproben
        </Typography>
      </Box>
    </Box>
</Box>


      <Box
        sx={{
          textAlign: 'center',
          mt: 4,
          mb: 2,
          height: 0,
        }}
      >
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Neue Daten Eintragen
        </Typography>
      </Box>

      {[
        { title: 'Patient anlegen', link: '/patient_anlegen' },
        { title: 'Proben einschleusen', link: '/proben_einschleusen' },
        { title: 'Proben ausschleusen', link: '/proben_ausscheusen' },
        { title: 'Proben wieder einschleusen', link: '/proben_wiedereinschleusen' },
      ].map((section, index) => (
        <Box
          key={index}
          sx={{
            bgcolor: 'background.paper',
            boxShadow: 3,
            borderRadius: 4,
            p: 3,
            m: 10,
          }}
        >
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center', // Ensures alignment of title and button
            }}
          >
            <Typography variant="h6" sx={{ fontWeight: 'medium', color: 'text.primary' }}>
              {section.title}
            </Typography>
            <Link
              href={section.link}
              className={clsx('text-white font-semibold hover:text-blue-200', {
                underline: location === section.link,
              })}
            >
              <ReusableButton
                buttonVariant="contained"
                buttonColor="primary"
                buttonText="Neu"
              />
            </Link>
          </Box>
          <Divider sx={{ my: 2 }} />
        </Box>
      ))}
    </ThemeProvider>
  );
}


--------------------------------------------------------------------------------
File Name: proben_ausscheusen.js
Location: ./frontend/src/pages/proben_ausscheusen.js
Content:
import React, { useState } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  RadioGroup,
  FormControl,
  FormLabel,
  FormControlLabel,
  Radio,
  Snackbar,
  Alert,
} from '@mui/material';
import { IoMdArrowRoundBack } from "react-icons/io";
import axios from 'axios';

export default function ProbeAusschleusen() {
  const [barcodeId, setBarcodeId] = useState('');
  const [selectedProbe, setSelectedProbe] = useState('serum'); // Default probe type
  const [errors, setErrors] = useState({});
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  const handleScan = (e) => {
    setBarcodeId(e.target.value);
  };

  const handleProbeChange = (e) => {
    setSelectedProbe(e.target.value);
  };

  const validateForm = () => {
    const newErrors = {};

    if (!barcodeId.trim()) {
      newErrors.barcodeId = 'Barcode ID darf nicht leer sein.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      console.log('Trying to submit data:', barcodeId);

      const response = await axios.patch(
        `http://localhost:8000/ausschleusen/${selectedProbe}/${barcodeId}`,
        null, // No body required as per your backend logic
        {
          headers: { 'Content-Type': 'application/json' },
        }
      );
      console.log('Data submitted successfully:', response.data);

      // Show success snackbar notification
      setSnackbarMessage(`Probe mit der Barcode Nummer ${barcodeId} erfolgreich Ausgeschleust!`);
      setSnackbarSeverity('success');
      setSnackbarOpen(true);

      // Clear the form
      setBarcodeId('');
    } catch (error) {
      console.error('Error submitting data:', error);

      // Show error snackbar notification
      setSnackbarMessage('Falsche Barcode ID oder Probenart!');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>
      <Box sx={{ position: 'absolute', top: 90, left: 16 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => (window.location.href = '/overview')}
        >
          <IoMdArrowRoundBack className="text-2xl" />
        </Button>
      </Box>
      <Box sx={{ textAlign: 'center', mt: 4, mb: 2 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'text.primary' }}>
          Proben Ausschleusen
        </Typography>
      </Box>

      {/* Proben RadioGroup */}
      <FormControl component="fieldset" margin="normal">
        <FormLabel id="proben-label">Probenart</FormLabel>
        <RadioGroup
          aria-labelledby="proben-label"
          name="proben"
          value={selectedProbe}
          onChange={handleProbeChange}
          row
        >
          <FormControlLabel value="serum" control={<Radio />} label="Serumproben" />
          <FormControlLabel value="gewebe" control={<Radio />} label="Gewebeproben" />
          <FormControlLabel value="urin" control={<Radio />} label="Urinproben" />
        </RadioGroup>
      </FormControl>

      <TextField
        label="Scannerfeld für Barcode ID"
        name="barcodeId"
        value={barcodeId}
        onChange={handleScan}
        fullWidth
        margin="normal"
        error={Boolean(errors.barcodeId)}
        helperText={errors.barcodeId}
        autoFocus
      />
      <Button
        variant="contained"
        color="primary"
        onClick={handleSubmit}
        fullWidth
        sx={{ mt: 2 }}
      >
        Probe ausschleusen
      </Button>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
      >
        <Alert
          onClose={() => setSnackbarOpen(false)}
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}


--------------------------------------------------------------------------------
File Name: api.ts
Location: ./frontend/src/services/api.ts
Content:
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8000'; 

//Get Routes
export const getTableData = async (tableName: string) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/table/data`, {
            params: {
                table_name: tableName,
            },
        });
        return response.data;
    } catch (error) {
        console.error('Error fetching table data:', error);
        throw error;
    }
};

export const getPatientCount = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/number/patients`);
        return response.data;  
    } catch (error) {
        console.error('Error fetching patient count:', error);
        throw error; 
    }
};

export const getSerumCount = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/number/serumproben`);
        return response.data;  
    } catch (error) {
        console.error('Error fetching patient count:', error);
        throw error; 
    }
};

export const getGewebeCount = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/number/gewebeproben`);
        return response.data;  
    } catch (error) {
        console.error('Error fetching patient count:', error);
        throw error; 
    }
};

export const getUrinCount = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/number/urinproben`);
        return response.data;  
    } catch (error) {
        console.error('Error fetching patient count:', error);
        throw error; 
    }
};

export const getParaffinCount = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/number/paraffinproben`);
        return response.data;  
    } catch (error) {
        console.error('Error fetching patient count:', error);
        throw error; 
    }
};







--------------------------------------------------------------------------------
